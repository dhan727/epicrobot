package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;

@TeleOp
public class MecanumTeleOp2 extends LinearOpMode {
    @Override
    public void runOpMode() throws InterruptedException {
        // Declare our motors
        // Make sure your ID's match your configuration
        DcMotor frontLeft = hardwareMap.dcMotor.get("frontLeft");
        DcMotor backLeft = hardwareMap.dcMotor.get("backLeft");
        DcMotor frontRight = hardwareMap.dcMotor.get("frontRight");
        DcMotor backRight = hardwareMap.dcMotor.get("backRight");
        DcMotor leftArm = hardwareMap.dcMotor.get("leftArm");
        DcMotor rightArm = hardwareMap.dcMotor.get("rightArm");
        CRServo leftServo = hardwareMap.crservo.get("leftServo");
        CRServo rightServo = hardwareMap.crservo.get("rightServo");

        // One motor is backwards
        frontRight.setDirection(DcMotorSimple.Direction.REVERSE);

        waitForStart();

        if (isStopRequested()) return;
        while (opModeIsActive()) {
            double y = -gamepad1.left_stick_y; // Remember, this is reversed!
            double x = gamepad1.left_stick_x * 1.1; // Counteract imperfect strafing
            double rx = gamepad1.right_stick_x;
            double tl = gamepad1.left_trigger;
            double tr = gamepad1.right_trigger;
            double bl = gamepad1.right_stick_y;
            double br =-gamepad1.right_stick_y;

            // Drivetrain Movement
            double denominator = Math.max(Math.abs(y) + Math.abs(x) + Math.abs(rx), 1);
            double frontLeftPower = (y + x + rx) / denominator;
            double backLeftPower = (y - x + rx) / denominator;
            double frontRightPower = (y - x - rx) / denominator;
            double backRightPower = (y + x - rx) / denominator;
            //Linear System Movement
            double leftArmPowerUp = -tl;
            double rightArmPowerUp = tl;
            double leftArmPowerD = tr;
            double rightArmPowerD = -tr;
            //Claw Movement
            if (gamepad1.left_bumper == true) {
                leftServo.setPower(1);
                rightServo.setPower(-1);
            }
            else{
                leftServo.setPower(0);
                rightServo.setPower(0);
            }

            if (gamepad1.right_bumper == true) {
                leftServo.setPower(-1);
                rightServo.setPower(1);
            }
            else{
                leftServo.setPower(0);
                rightServo.setPower(0);
            }


            leftServo.setPower(-1);

            rightServo.setPower(1);

                    frontLeft.setPower(frontLeftPower);
            backLeft.setPower(backLeftPower);
            frontRight.setPower(frontRightPower);
            backRight.setPower(backRightPower);

            leftArm.setPower(leftArmPowerUp);
            rightArm.setPower(rightArmPowerUp);
            leftArm.setPower(leftArmPowerD);
            rightArm.setPower(rightArmPowerD);


        }
    }
}
